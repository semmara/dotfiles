# Add auto-completion and a stored history file of commands to your Python
# interactive interpreter. Requires Python 2.0+, readline. Autocomplete is
# bound to the Esc key by default (you can change it - see readline docs).
#
# Store the file in ~/.pystartup, and set an environment variable to point
# to it:  "export PYTHONSTARTUP=~/.pystartup" in bash.


#import atexit
#import os
#import readline
#import rlcompleter
#
#historyPath = os.path.expanduser("~/.pyhistory")
#
#def save_history(historyPath=historyPath):
#    import readline
#    readline.write_history_file(historyPath)
#
#if os.path.exists(historyPath):
#    readline.read_history_file(historyPath)
#
#atexit.register(save_history)
#
#if 'libedit' in readline.__doc__:
#	readline.parse_and_bind("bind ^I rl_complete")
#else:
#	readline.parse_and_bind("tab: complete")
#
#del os, atexit, readline, rlcompleter, save_history, historyPath


import readline,rlcompleter

### Indenting
class TabCompleter(rlcompleter.Completer):
    """Completer that supports indenting"""
    def complete(self, text, state):
        if not text:
            return ('    ', None)[state]
        else:
            return rlcompleter.Completer.complete(self, text, state)

readline.set_completer(TabCompleter().complete)

### Add autocompletion
if 'libedit' in readline.__doc__:
    readline.parse_and_bind("bind -e")
    readline.parse_and_bind("bind '\t' rl_complete")
else:
    readline.parse_and_bind("tab: complete")

### Add history
import os
histfile = os.path.join(os.environ["HOME"], ".pyhistory")
try:
    readline.read_history_file(histfile)
except IOError:
    pass
import atexit
atexit.register(readline.write_history_file, histfile)

del os, atexit, TabCompleter, histfile
